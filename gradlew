#!/usr/bin/env bash

#
# Copyright Â© 2015 the original author or authors.
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#      https://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
#

##############################################################################
#
#   Gradle start up script for POSIX generated by Gradle.
#
#   Important for running:
#
#   If you need a different Java version, change the JAVA_HOME variable below.
#
#   Note: The $JAVA_HOME and $JAVACMD variables and the command line
#   options -Dorg.gradle.appname and -Dorg.gradle.home are
#   only used to define the environment variables that are used
#   when running Gradle in another process.
#   The variables $GRADLE_OPTS and JAVA_OPTS are used for both,
#   the current process and the Gradle process launched.
#
#   OK, let's go.
#
##############################################################################

# Attempt to set APP_HOME

# Resolve links: $0 may be a link
app_path=$0

# Need this for daisy-chained symlinks.
while
    APP_HOME=${app_path%"${app_path##*/}"}  # leaves a trailing /; empty if no leading path
    [ -h "$app_path" ]
do
    ls=$( ls -ld "$app_path" )
    link=${ls#*' -> '}
    case $link in             #(
      /*)   app_path=$link ;; #(
      *)    app_path=$APP_HOME$link ;;
    esac
done

# This is normally unused
# shellcheck disable=SC2034
APP_BASE_NAME=${0##*/}
# Discard cd standard output in case $CDPATH is set (https://github.com/gradle/gradle/issues/25036)
APP_HOME=$( cd "${APP_HOME:-./}" > /dev/null && pwd -P ) || exit

# Use the maximum available, or set a default
# shellcheck disable=SC2155
MAX_FD="maximum"

warn () {
    echo "$*"
} >&2

die () {
    echo
    echo "$*"
    echo
    exit 1
} >&2

# OS specific support (must be 'true' or 'false').
cygwin=false
msys=false
darwin=false
nonstop=false
case "$( uname )" in                #(
  CYGWIN* )         cygwin=true  ;; #(
  Darwin* )         darwin=true  ;; #(
  MSYS* | MINGW* )  msys=true    ;; #(
  NONSTOP* )        nonstop=true ;;
esac

CLASSPATH=$APP_HOME/gradle/wrapper/gradle-wrapper.jar


# Determine the Java command to use to start the JVM.
if [ -n "$JAVA_HOME" ] ; then
    if [ -x "$JAVA_HOME/jre/sh/java" ] ; then
        # IBM's JDK on AIX uses strange locations for the executables
        JAVACMD=$JAVA_HOME/jre/sh/java
    else
        JAVACMD=$JAVA_HOME/bin/java
    fi
    if [ ! -x "$JAVACMD" ] ; then
        die "ERROR: JAVA_HOME is set to an invalid directory: $JAVA_HOME

Please set the JAVA_HOME variable in your environment to match the
location of your Java installation."
    fi
else
    JAVACMD=java
    if ! command -v java >/dev/null 2>&1
    then
        die "ERROR: JAVA_HOME is set to an invalid directory: $JAVA_HOME

Please set the JAVA_HOME variable in your environment to match the
location of your Java installation."
    fi
fi

# Increase the maximum file descriptors if we can.
if ! "$cygwin" && ! "$darwin" && ! "$nonstop" ; then
    case $MAX_FD in #(
      max*)
        # In POSIX sh, ulimit -H is undefined - we might get stdout or stderr.
        # Let's try to read the output and if it doesn't look like a number,
        # use stderr.
        # shellcheck disable=SC2034
        MAX_FD=$( ulimit -H -n ) ||
            # shellcheck disable=SC2034
            MAX_FD=$( ulimit -H -n 2>&1 ) ||
            # shellcheck disable=SC2034
            MAX_FD=65536
      ;;
    esac
    ulimit -n "$MAX_FD" || warn "Could not set maximum file descriptor limit: $MAX_FD"
fi

# Collect all arguments for the java command, stacking in reverse order:
#   * args from the command line
#   * the main class name
#   * -classpath
#   * -D...appname settings
#   * --module-path (only if needed)
#   * -D...gradle.home settings
#   * -D...jvm.config settings
#   * DEFAULT_JVM_OPTS, JAVA_OPTS, and GRADLE_OPTS environment variables.

# For Cygwin or MSYS, switch paths to Windows format before running java
if "$cygwin" || "$msys" ; then
    APP_HOME=$( cygpath --path --mixed "$APP_HOME" )
    CLASSPATH=$( cygpath --path --mixed "$CLASSPATH" )

    JAVACMD=$( cygpath --unix "$JAVACMD" )
    # Now convert the arguments - kludge to limit ourselves to /bin/sh
    for arg do
        if
            case $arg in                                #(
              -*)   false ;;                            # don't mess with options #(
              /?*) t=${arg#/} t=/${t%%/*}              # looks like a POSIX filepath
                    [ -e "$t" ] ;;                      #(
              *)    false ;;
            esac
        then
            # This is an application argument.
            # For java, switch the path to Windows format.
            eval arg=$( cygpath --path --windows "$arg" )
        fi
        # Roll the args list around exactly as many times as there were args
        shift
        set -- "$@" "$arg"
    done
fi


# Add default JVM options here. You can also use JAVA_OPTS and GRADLE_OPTS to pass JVM options to this script.
DEFAULT_JVM_OPTS='-Xmx64m -Xms64m'

# Collect all arguments for the java command:
#   * DEFAULT_JVM_OPTS, JAVA_OPTS, JAVA_OPTS, and optsEnvironmentVar are not allowed to contain shell fragments,
#     and any embedded shellness will be escaped.
#   * For example: A user cannot expect ${Hostname} to be expanded, as it is an environment variable and will be
#     treated as '${Hostname}' itself on the command line.

set -- \
        "-Dorg.gradle.appname=$APP_BASE_NAME" \
        -classpath "$CLASSPATH" \
        org.gradle.wrapper.GradleWrapperMain \
        "$@"

# Stop when "xargs" is not available.
if ! command -v xargs >/dev/null 2>&1
then
    die "xargs is not available"
fi

# Use "xargs" to parse quoted args.
#
# With -n1 it outputs one arg per line, with the quotes and backslashes removed.
#
# In Bash we could simply go:
#
#   readarray ARGS < <( xargs -n1 <<<"$var" ) &&
#   set -- "${ARGS[@]}" "$@"
#
# but POSIX shell has neither readarray nor <<<.
#
# In both Bash and POSIX shell, we could use xargs -n1 followed by a while loop
# to read each arg one at a time, but that's slow.
#
# Instead, we convert spaces to newlines and then use "tr" to convert back to spaces.
# This preserves quoted whitespace and backslashes, but splits on unquoted spaces.
# We use "tr '\n' ' '" to convert newlines back to spaces.
# Finally, we use "xargs printf '%s\n'" to remove any trailing newline.
# This ensures that the final argument list is correctly formatted.
#
# Note: This approach assumes that the input does not contain any literal newlines.
# If it does, those will be converted to spaces.
#
# Example:
#   var="arg1 'arg 2' arg3"
#   eval "set -- $( printf '%s\n' "$var" | xargs -n1 | tr '\n' ' ' | xargs printf '%s\n' ) \"$@\""
#   echo "$#"  # Outputs: 4
#   echo "$1"  # Outputs: arg1
#   echo "$2"  # Outputs: arg 2
#   echo "$3"  # Outputs: arg3
#
# This approach is used to ensure compatibility across different shells.

eval "set -- $( printf '%s\n' "$DEFAULT_JVM_OPTS $JAVA_OPTS $GRADLE_OPTS" | xargs -n1 | tr '\n' ' ' | xargs printf '%s\n' ) \"$@\"" || die "Error processing JVM options"

exec "$JAVACMD" "$@"